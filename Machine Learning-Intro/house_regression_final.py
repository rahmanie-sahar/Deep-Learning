# -*- coding: utf-8 -*-
"""house_regression_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Alireza-Akhavan/ML-notebooks/blob/main/house_regression_final.ipynb
"""

import pandas as pd
import numpy as np

file_url = "https://raw.githubusercontent.com/emanhamed/Houses-dataset/master/Houses%20Dataset/HousesInfo.txt"
columns = ["bedroom", "bathroom", "area", "zipcodes", "price"]
df = pd.read_csv(file_url, sep=" ", names=columns)
df

df.dtypes

df["zipcodes"].value_counts()

temp_df = df[["zipcodes", "price"]]
temp_df.groupby("zipcodes").mean().astype("int32")

zip_codes, counts = np.unique(df["zipcodes"], return_counts=True)

len(df)

df

for zipcode, count in zip(zip_codes,counts):
  if count<25:
    idxs = df[df["zipcodes"] ==zipcode].index
    df.drop(idxs, inplace=True)

df

len(df)

np.unique(df["zipcodes"], return_counts=True)

df["zipcodes"].value_counts()

temp_df = df[["zipcodes", "price"]]
temp_df.groupby("zipcodes").mean().astype("int64")

from sklearn.model_selection import train_test_split

train_df, test_df = train_test_split(df, test_size=0.25, random_state=42)

print(train_df.shape)
print(test_df.shape)

m = train_df["price"].max()

train_y = train_df["price"]/ m
test_y = test_df["price"]/ m

max(list(train_y))

from sklearn.preprocessing import MinMaxScaler
minmax = MinMaxScaler()

numeric_columns = ["bedroom", "bathroom", "area"]
train_numeric = minmax.fit_transform(train_df[numeric_columns])

test_numeric = minmax.transform(test_df[numeric_columns])

from sklearn.preprocessing import LabelBinarizer
lbl = LabelBinarizer()

lbl.classes_

train_categorical = lbl.fit_transform(train_df[["zipcodes"]])
test_categorical = lbl.transform(test_df[["zipcodes"]])

lbl.classes_

test_categorical[:2]

print(train_numeric.shape)
print(train_categorical.shape)

train_x = np.hstack([train_numeric,train_categorical])
train_x.shape

test_x = np.hstack([test_numeric,test_categorical])
test_x.shape

from sklearn.linear_model import LinearRegression

est = LinearRegression()

est.fit(train_x, train_y)

est.score(train_x, train_y)

est.score(test_x, test_y)

predicted = est.predict(test_x)

for i, j in zip(predicted, test_y):
  print(int(i*m), "-->", int(j*m))

from sklearn import tree
est2 = tree.DecisionTreeRegressor()

est2.fit(train_x, train_y)
est2.score(train_x, train_y)

est2.score(test_x, test_y)

from sklearn.neural_network import MLPRegressor

est3 = MLPRegressor()

est3.fit(train_x, train_y)
est3.score(train_x, train_y)

est3.score(test_x, test_y)

